// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
* The Central Processing unit (CPU).
* Consists of an ALU and a set of registers, designed to fetch and
* execute instructions written in the Hack machine language.
* In particular, the ALU executes the inputted instruction according
* to the Hack machine language specification, as follows.
* The D and A in the language specification refer to CPU-resident registers,
* while M refers to the memory register addressed by A, i.e. to Memory[A].
* The inM input holds the value of this register. If the current instruction
* needs to write a value to M, the value is placed in outM, the address
* of the target register is placed in the addressM output, and the
* writeM control bit is asserted. (When writeM=0, any value may
* appear in outM). The outM and writeM outputs are combinational:
* they are affected instantaneously by the execution of the current
* instruction. The addressM and pc outputs are clocked: although they
* are affected by the execution of the current instruction, they commit
* to their new values only in the next time unit. If reset == 1, then the
* CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather
* than to the address resulting from executing the current instruction.
*/
CHIP cpu1 {
IN inM[16], // M value input (M = contents of RAM[A])
instruction[16], // Instruction for execution
reset; // Signals whether to re-start the current program
// (reset == 1) or continue executing the current
// program (reset == 0).
OUT outM[16], // M value output
writeM, // Write into M?
addressM[15], // RAM address (of M)
pc[15]; // ROM address (of next instruction)
PARTS:
{
    Not(in=instruction[15], out=aInstr);
    And(a=instruction[15], b=true, out=cInstr);
    And(a=cInstr, b=instruction[12], out=useM);
    And(a=cInstr, b=instruction[5], out=destA);
    And(a=cInstr, b=instruction[4], out=destD);
    And(a=cInstr, b=instruction[3], out=writeM);

    Mux16(a=loop, b=instruction, sel=aInstr, out=aIn);

    Or(a=destA, b=aInstr, out=loadA);
    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);

    Mux16(a=aOut, b=inM, sel=useM, out=aOrM);

    DRegister(in=loop, load=destD, out=dOut);

    ALU(x=dOut, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=aluZr, ng=aluNg, out=loop, out=aluOut);
    Mux16(a=aOrM, b=aluOut, sel=cInstr, out=outM);

    And(a=aluNg, b=instruction[2], out=jlt);
    And(a=aluZr, b=instruction[1], out=jeq);
    Or(a=aluZr, b=aluNg, out=zrOrNg);
    Not(in=zrOrNg, out=notZrOrNg);
    And(a=notZrOrNg, b=instruction[0], out=jgt);
    Or(a=jlt, b=jeq, out=jltOrJeq);
    Or(a=jltOrJeq, b=jgt, out=jltOrJeqOrJgt);
    And(a=cInstr, b=jltOrJeqOrJgt, out=jump);
    Not(in=jump, out=noJump);

    PC(in=aOut, load=jump, inc=noJump, reset=reset, out[0..14]=pc);

}

